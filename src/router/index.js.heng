/**
 * 全站路由配置
 *
 * 对于自动生成页（可配到菜单中）/page/:id, 虽然菜单信息中有 id 和 name, 但路由信息中没有, 所以采用 path 来匹配
 * 菜单中不能配通配符id，否则所有页都会匹配这个菜单
 * 菜单中每次只能配单个页地址，虽可以通过解析找到page模块，但如果事先路由中不存在/page/:id，会造成只有菜单配了才可以查看该页效果
 */
import Vue from 'vue'
import Router from 'vue-router'
// import api_menu from "@/api/sys/menu";
import api_auth from '@/api/auth'
import { clearLoginInfo, getfixedUrl, sortTreeData } from '@/utils'
import cloneDeep from 'lodash/cloneDeep'
import axios from 'axios'
import config from '@/config'
import constantRouter from './constant-router'
import QueryString from 'qs'
// import NProgress from "nprogress";
// import store from "@/store";
// import api from "@/service/userService";
// import 'nprogress/nprogress.css'

Vue.use(Router)

// 当前路由下 cancel token 的 source，用于跳转路由时取消请求
let currentCancelTokenSource = {
  token: null,
  cancel: null
}

export function getCurrentCancelToken() {
  return currentCancelTokenSource.token
}

// 取消现有 cancel token 下所有未完成的请求
export function cancelRequest() {
  currentCancelTokenSource.cancel && currentCancelTokenSource.cancel()
}

// 开发环境不使用懒加载, 因为懒加载页面太多的话会造成webpack热更新太慢, 所以只有生产环境使用懒加载
// const _import = require("./import-" + process.env.NODE_ENV);
const _import = require('./import-' + process.env.NODE_ENV).default
// const _import = require("./import-production").default;

// 全局路由(无需嵌套上左右整体布局)
const globalRoutes = [
  {
    path: '/404',
    component: _import('404'),
    name: '404'
  },
  {
    path: '/login',
    component: _import('login'),
    name: 'login'
  },
  // 没有自动生成页root需求时，注释掉这里
  {
    path: '/page-root/:type/:id', // 仅显示单页，用于嵌入到其它系统
    component: _import('page/page-root')
  }
]

// 主入口路由(需嵌套上左右整体布局)
const mainRoutes = {
  path: '/',
  component: _import('main'),
  name: 'main',
  children: [
    // 没有自动生成页需求时，注释掉这里
    {
      path: '/page/:type/:id', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('page')
    },
    // 规则新增
    {
      path: '/my/rule/add', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('my/rule/add-or-update'),
      name: '新增规则'
    },
    // 规则编辑
    {
      path: '/my/rule/update', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('my/rule/add-or-update'),
      name: '修改规则'
    },
    // 默认跳转大屏页
    {
      path: '/app/list', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('app/list'),
      name: '全网应用'
    },
    // 规则跳转大屏页
    {
      path: '/app/rule', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('app/list-or-rule')
    },
    {
      path: '/my/association/list', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('my/association/list'),
      name: '关联分析'
    },
    {
      path: '/my/association/index', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('my/association/index'),
      name: '关联分析2'
    },
    {
      path: '/my/myscreen/index', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('my/myscreen/index'),
      name: '沙箱养殖'
    },
    {
      path: '/my/finanicalsandbox/index', // 可能对应多个菜单项，如: 自动生成页1，自动生成页2
      component: _import('my/finanicalsandbox/index'),
      name: '金融沙箱养殖'
    }
  ]
}

let firstRoute
const router = createRouter()

// 创建路由
function createRouter() {
  return new Router({
    mode: 'hash',
    scrollBehavior: () => ({ y: 0 }),
    hasDynamicRoutes: false, // 是否已经添加动态(菜单)路由
    routes: globalRoutes.concat(mainRoutes)
  })
}
// 重置路由
function resetRouter() {
  const newRouter = createRouter()
  router.matcher = newRouter.matcher
  firstRoute = null
}

router.beforeEach((to, from, next) => {
  // NProgress.start();
  // 登录注册等其他页面可直接进入
  // if (to.meta.open) return next();
  // // 获取用户信息
  // if (!store.state.account.account) {
  //   const userinfo = await api.userinfo();
  //   store.commit("LOGIN", userinfo);
  //   return next();
  // }
  // 取消旧页面的请求
  cancelRequest()
  //if (to.meta.open) return next();
  // 生成当前页新的 cancel token
  currentCancelTokenSource = axios.CancelToken.source()

  // 添加动态(菜单)路由
  // 1. 已经添加 or 全局路由, 直接访问
  // 2. 获取菜单列表, 添加并保存本地存储
  if (router.options.hasDynamicRoutes || getRouteType(to) === 'global') {
    if (to.path === '/') {
      // next(firstRoute);
      router.push(firstRoute)
    } else {
      next()
    }
  } else {
    /* const token = Vue.cookie.get("token");
    const id = localStorage.getItem("id");
    // 如果没有登录
    if (!token || !/\S/.test(token) || !id) {
      clearLoginInfo();
      next({ name: "login", params: { target: to.path } });
    } else {
      // 重置路由
      resetRouter(); */
    // api_menu.getMenuNav(id)
    $.get('webConfig.json').then(rsp => {
      if (rsp.ops) {
        //维护中
        clearLoginInfo()
        sessionStorage.setItem('menuList', '[]')
        sessionStorage.setItem('permissions', '[]')
        window.open('ops/index.html', '_self')
      } else {
        api_auth
          .getMyInfo()
          .then(data => {
            localStorage.setItem('id', data.user.id)
            localStorage.setItem('userName', data.user.userName)
            //store.commit("LOGIN", data);
            // 重置路由
            resetRouter()

            // const menuList = data.list;
            let list = [],
              permissions = []
            data.apps.forEach(item => {
              if (
                config.showFullMenu ||
                item.key === config.appKey ||
                (config.showSystemMenu && item.key === 'system')
              )
                list = list.concat(item.menus)

              // 兼容ng版配置
              let keys = []
              Object.keys(item.functions).map(key => {
                // const mappedPermission = ng_permission_mapping[key];
                let mappedPermission
                if (mappedPermission) {
                  keys = keys.concat(mappedPermission)
                } else {
                  keys = keys.concat(key)
                }
              })
              permissions = permissions.concat(keys)
            })

            const menuList = sortTreeData(list)

            // console.log("菜单列表：", menuList);
            dynamicRoutesBuilder(menuList)
            router.options.hasDynamicRoutes = true
            sessionStorage.setItem('menuList', JSON.stringify(menuList || '[]'))

            firstRoute = { path: getFirstUrl(menuList) || '/' }
            // console.log("第一个Url：", firstRoute);
            sessionStorage.setItem(
              'permissions',
              JSON.stringify(permissions || '[]')
            )

            next({ ...to, replace: true })
          })
          .catch(e => {
            clearLoginInfo()
            sessionStorage.setItem('menuList', '[]')
            sessionStorage.setItem('permissions', '[]')
            console.log(
              `%c${e} 请求菜单列表和权限失败，跳转至登录页！！`,
              'color:blue'
            )
            next({ name: 'login', params: { target: to.path } })
          })
      }
    })
  }
})

/**
 * 获取路由类型, global: 全局路由, main: 主入口路由
 * @param {*} route 当前路由
 */
function getRouteType(route) {
  let tmp = []
  for (let i = 0; i < globalRoutes.length; i++) {
    if (route.path === globalRoutes[i].path) {
      return 'global'
    } else if (
      globalRoutes[i].children &&
      globalRoutes[i].children.length >= 1
    ) {
      tmp = tmp.concat(globalRoutes[i].children)
    }
  }
  return tmp.length >= 1 ? getRouteType(route, tmp) : 'main'
}

// 获取第一个可用的菜单 url
function getFirstUrl(menuList) {
  for (const item of menuList) {
    if (item.url && /\S/.test(item.url)) {
      switch (item.openMode) {
        case 'blank':
          break
        case 'iframe':
          return 'iframe/' + encodeURIComponent(item.url)
        default:
          return item.url
      }
    } else if (item.children) {
      const result = getFirstUrl(item.children)
      if (result) return result
    }
  }
  return null
}

/**
 * 动态路由生成器
 * @param {*} menuList 菜单列表
 * @param {*} routes 动态路由
 */
function dynamicRoutesBuilder(menuList = [], routes = []) {
  let tmp = []

  for (let i = 0; i < menuList.length; i++) {
    const ml = menuList[i]
    if (ml.children && ml.children.length >= 1) {
      tmp = tmp.concat(ml.children)
    } else if (ml.url && /\S/.test(ml.url)) {
      // ml.url = ml.url.replace(/^\//, "");
      if (ml.openMode == 'blank') {
        ml.url = getfixedUrl(ml.url)
        continue
      }

      // vue-router 在 matcher 会自动加上 "/"
      // if (!/^http[s]?:\/\/.*/.test(ml.url) && ml.url.charAt(0) != "/") {
      //   ml.url = "/" + ml.url;
      // }

      if (/^\/page\/[0-9]+/.test(ml.url)) {
        continue
      } else {
        var route = {
          path: ml.url,
          component: null,
          name: ml.name /* ,
          meta: {
            id: ml.id
          } */
        }

        if (ml.openMode == 'iframe') {
          ml.url = getfixedUrl(ml.url)
          route.path = 'iframe/' + encodeURIComponent(ml.url)
          route.component = _import('iframe') || null
          route.meta = {
            ...route.meta,
            iframeUrl: ml.url
          }
        } else {
          let componentUrl = ml.url.replace(new RegExp(/\./g), '/')
          // let componentUrl = ml.url.replace(/^\//, "");
          componentUrl = componentUrl.split('/:')[0]
          try {
            route.component = _import(componentUrl) || null
          } catch (e) {
            console.log(e)
          }
        }
        // console.log(route);

        routes.push(route)
        // console.log("routes", routes);
      }
    }
  }
  if (tmp.length >= 1) {
    dynamicRoutesBuilder(tmp, routes)
  } else {
    const dynamicRoutes = cloneDeep(mainRoutes)
    dynamicRoutes.name = 'main-dynamic'
    dynamicRoutes.children = routes
    // 现有路由信息不能修改和删除，只能 addRoutes 来改变
    //  debugger;
    router.addRoutes([
      ...constantRouter,
      dynamicRoutes,
      { path: '*', redirect: { name: '404' } }
    ])
    // console.log("dynamic_routes", router);
    // console.log(router);
  }
}

export default router
